(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{613:function(e,n,t){"use strict";t.r(n);var a={name:"component-exhibition",components:{"firm-demo0":(Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e})({render:function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[[t("div",[t("p",{staticStyle:{margin:"20px 0"}},[t("el-button",{on:{click:function(n){return e.$refs.plTreeTable.toggleTreeExpansion(e.treeData[0])}}},[e._v("切换第一个")]),e._v(" "),t("el-button",{on:{click:function(n){return e.$refs.plTreeTable.setTreeExpansion(e.treeData[2],!0)}}},[e._v("展开第三个")]),e._v(" "),t("el-button",{on:{click:function(n){return e.$refs.plTreeTable.setAllTreeExpansion()}}},[e._v("展开全部")]),e._v(" "),t("el-button",{on:{click:function(n){return e.$refs.plTreeTable.clearTreeExpand()}}},[e._v("关闭所有")]),e._v(" "),t("el-button",{on:{click:e.getTreeExpansionEvent}},[e._v("获取已展开")])],1),e._v(" "),t("u-table",{ref:"plTreeTable",attrs:{"fixed-columns-roll":"","beautify-table":"","header-drag-style":"",height:e.height,treeConfig:{children:"children",expandAll:!1},"use-virtual":"","row-key":"id",border:""}},[t("u-table-column",{attrs:{"tree-node":!0,prop:"address",label:"我是树节点",fixed:"",width:200}}),e._v(" "),e._l(e.columns,(function(e){return t("u-table-column",{key:e.id,attrs:{prop:e.prop,label:e.label,width:e.width}})}))],2)],1)]],2)},staticRenderFns:[]},{data:function(){return{height:400,columns:Array.from({length:10},(function(e,n){return{prop:"address",id:n,label:"地址"+n,width:200}}))}},mounted:function(){var e=Array.from({length:500},(function(e,n){return{id:n+"_1",date:"2016-05-03",name:1,ab:"欢迎使用u-table",address:n,children:Array.from({length:2},(function(e,t){return{id:n+"_"+t+"_1",date:"2016-05-03",name:1,ab:"欢迎使用u-table",address:n+"_"+t,children:Array.from({length:1},(function(e,a){return{id:n+"_"+t+"_"+a+"_1",date:"2016-05-03",name:1,ab:"欢迎使用u-table",address:n+"_"+t+"_"+a}}))}}))}}));this.treeData=e,this.$refs.plTreeTable.reloadData(e),console.log(this.$refs.plTreeTable.tableExample())},methods:{getTreeExpansionEvent:function(){console.log(this.$refs.plTreeTable.getTreeExpandRecords())}}})}},r=t(46),i=Object(r.a)(a,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",[e._m(0),t("p",[e._v("建议开启使用：show-body-overflow 和 show-header-overflow 。")]),t("p",[e._v("必须指定 row-key  必须开启use-virtual。")]),t("p",[e._v("（注意：不给height或者不给maxheight，又或者给的是0，use-virtual直接会关闭）。 树且不能用，不能展开 。")]),t("p",[e._v("虚拟树形表格不支持表格存在 selection 复选框")]),t("p",[e._v("关于treeConfig配置呢 看文档吧。")]),t("div",[e._m(1),t("template",{slot:"source"},[t("firm-demo0")],1),t("template",{slot:"highlight"},[e._m(2)])],2),e._m(3),e._m(4)])}),[function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"xu-ni-shu-xing-biao-ge-ji-chu-xu-ni-bu-jie-jue-lie-duo-qing-kuang"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xu-ni-shu-xing-biao-ge-ji-chu-xu-ni-bu-jie-jue-lie-duo-qing-kuang"}},[this._v("¶")]),this._v(" 虚拟树形表格(基础虚拟，不解决列多情况)")])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",[n("p",[n("code",[this._v("data")]),this._v("对象数组后，大量数据不建议使用双向绑定的 data 属性（vue 监听会大数据会短暂的卡顿），建议使用 reloadData 函数,请看表格方法")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",{pre:!0},[n("code",{pre:!0,attrs:{class:"html"}},[this._v('  <template>\n   <div>\n     <p style="margin: 20px 0;">\n         <el-button @click="$refs.plTreeTable.toggleTreeExpansion(treeData[0])">切换第一个</el-button>\n         <el-button @click="$refs.plTreeTable.setTreeExpansion(treeData[2], true)">展开第三个</el-button>\n         <el-button @click="$refs.plTreeTable.setAllTreeExpansion()">展开全部</el-button>\n         <el-button @click="$refs.plTreeTable.clearTreeExpand()">关闭所有</el-button>\n         <el-button @click="getTreeExpansionEvent">获取已展开</el-button>\n     </p>\n     <u-table\n          ref="plTreeTable"\n          fixed-columns-roll\n          beautify-table\n          header-drag-style\n          :height="height"\n          :treeConfig="{children: \'children\', expandAll: false}"\n          use-virtual\n          row-key="id"\n          border>\n              \x3c!--u-table大数据表格 你需要在列上指定某个列显示展开收起 treeNode属性--\x3e\n              <u-table-column\n                 :tree-node="true"\n                 prop="address"\n                 label="我是树节点"\n                 fixed\n                 :width="200"/>\n              <u-table-column\n                 v-for="item in columns"\n                 :key="item.id"\n                 :prop="item.prop"\n                 :label="item.label"\n                 :width="item.width"/>\n        </u-table>\n    </div>\n </template>\n\n  <script>\n    export default {\n      data() {\n        return {\n          height: 400,\n          columns: Array.from({ length: 10 }, (_, idx) => ({\n              prop: \'address\', id: idx, label: \'地址\' + idx, width: 200\n          }))\n        }\n      },\n      mounted () {\n          // console.log(500 + (500 * 500) + (500 * 500 * 10))\n          const data = Array.from({ length: 500 }, (_, idx) => ({\n               id: idx + \'_\' + 1,\n               date: \'2016-05-03\',\n               name: 1,\n               ab: \'欢迎使用u-table\',\n               address: idx,\n               children: Array.from({ length: 2 }, (_, idx2) => ({\n                   id: idx + \'_\' + idx2 + \'_\' + 1,\n                   date: \'2016-05-03\',\n                   name: 1,\n                   ab: \'欢迎使用u-table\',\n                   address: idx + \'_\' + idx2,\n                   children: Array.from({ length: 1 }, (_, idx3) => ({\n                       id: idx + \'_\' + idx2 + \'_\' + idx3 + \'_\' + 1,\n                       date: \'2016-05-03\',\n                       name: 1,\n                       ab: \'欢迎使用u-table\',\n                       address: idx + \'_\' + idx2 + \'_\' + idx3\n                   }))\n               }))\n           }));\n        this.treeData = data // 知道为啥treeData不在 data()方法里面定义吗？嘻嘻\n        // 设置表格数据\n        this.$refs.plTreeTable.reloadData(data)\n        // 获取表格实例，里面可以得到列，表格数据等等\n        console.log(this.$refs.plTreeTable.tableExample())\n      },\n      methods: {\n            // 获取已经展开的节点\n            getTreeExpansionEvent () {\n                console.log(this.$refs.plTreeTable.getTreeExpandRecords())\n            },\n      }\n    }\n  <\/script>\n')])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"xia-mian-shi-guan-yu-u-table-de-xu-ni-shu-xing-shu-ju-de-jie-shao-xi-wang-du-wan-xia-mian-de-wen-zi"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#xia-mian-shi-guan-yu-u-table-de-xu-ni-shu-xing-shu-ju-de-jie-shao-xi-wang-du-wan-xia-mian-de-wen-zi"}},[this._v("¶")]),this._v(" 下面是关于u-table的虚拟树形数据的介绍，希望读完下面的文字")])},function(){var e=this.$createElement,n=this._self._c||e;return n("pre",[n("code",{staticClass:"language-javascript"},[this._v("\n     // （最大数量500）当然你可以更多，那么只会导致你遍历时间多，页面等待时间长，（并非渲染节点时间长）\n     // 另外 就以下的这个层级，总数据量全部展开后，就是 1000 + (1000 x 2) + (1000 x 2 x 1) = 5000 的总数据量\n\n     // 如果你 第一级是500， 第二级也是500， 第三级是10。 那么你的数据量就是 500 + (500 x 500) + (500 x 500 x 10) = 上百万 的总数据量，这是非常吓人的\n     // 所以结合自己情况去给树数据，不要瞎乱给表格的数据，树节点避免不了去递归，如果你的数据量很大很大，那么你会死在遍历上。\n\n     // 所以并非第一级不能超过500，是想告诉你们嵌套里面子节点层级数据量不要太大。比如你可这样的： 第一级为1000， 第二级为2-5的数据量，\n     // 第三级为2-5的数据量....， 那么这样算下来，就是 1000 + (1000 x 3) + (1000 x 3 x 2)  = 10000的数据量，应该是可以的，但是记住要是太大的嵌套数据。那只会导致\n     // 程序卡在遍历数据上，因为程序需要慢慢去递归遍历。这是没有办法的。\n\n     // 但是传统el-table  或者el-tree他们数据量超过200  就会卡。 所以我们已经很好的优化了这一点。不过看来现实场景中，对树形数据的要求，应该数据量不会太大。\n\n     // 你可以在u-table的基础上去改改样式，就可以变相的去实现el-tree的组件了哦，你隐藏下头部，把行的高度给小一点。然后隐形边框线。是不是就是el-tree了呢？？？\n\n    var dataList = Array.from({ length: 1000 }, (_, idx) => ({\n        id: idx + '_' + 1,\n        date: '2016-05-03',\n        name: 1,\n        ab: '欢迎使用u-table',\n        address: idx,\n        children: Array.from({ length: 2 }, (_, idx2) => ({\n            id: idx + '_' + idx2 + '_' + 1,\n            date: '2016-05-03',\n            name: 1,\n            ab: '欢迎使用u-table',\n            address: idx + '_' + idx2,\n            children: Array.from({ length: 1 }, (_, idx3) => ({\n                id: idx + '_' + idx2 + '_' + idx3 + '_' + 1,\n                date: '2016-05-03',\n                name: 1,\n                ab: '欢迎使用u-table',\n                address: idx + '_' + idx2 + '_' + idx3\n            }))\n        }))\n    }));\n\n")])])}],!1,null,null,null);n.default=i.exports}}]);